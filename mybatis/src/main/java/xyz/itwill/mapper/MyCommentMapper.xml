<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="xyz.itwill.mapper.MyCommentMapper">
	<!-- cache: SELECT 명령의 검색 결과(Java 객체)를 임시 메모르(Cache 메모리)에 저장하여 빠른 검색 결과를 제공하기 위한 엘리먼트 - 가독성 증가 -->
	<!-- ▶ INSERT, UPDATE, DELETE 명령이 실행되면 임시 메모리에 저장된 검색 결과는 자동으로 초기화 -->
	<!-- ▶ 검색 결과를 저장하는 객체는 반드시 객체 직렬화 클래스로 작성 -->
	<!-- ▶ XML 기반 매퍼 파일에서 cache 엘리먼트를 사용한 경우 SELECT 명령에 대한 검색 결과로 제공될 객체의 클래스는 반드시 객체 직렬화 클래스로 선언  -->
	<!-- <cache/> -->
	<!-- ▶ 저장된 객체(클래스)를 모두 객체 직렬화 클래스로 바꿔주어야 하기 때문에 사용 X -->

	<insert id="insertComment1" parameterType="MyComment1">
		insert into mycomment values(mycomment_seq.nextval, #{commentId}, #{commentContent}, sysdate)
	</insert>

	<insert id="insertComment2" parameterType="MyComment1">
		<!-- selectKey: SELECT 명령의 검색 결과 값을 제공받아 insert 엘리먼트의 parameterType 속성값으로 설정된 객체의 필드값으로 저장하기 위한 엘리먼트 - insert 엘리먼트의 종속된 엘리먼트 -->
		<!-- ▶ 자동 증가값(Oracle) 또는 난수값(MySQL / MsSQL)을 SELECT 명령으로 검색하여 객체 필드에 저장하여 INSERT 명령에서 사용하기 위해 작성 -->
		<!-- resultType 속성: SELECT 명령으로 검색된 결과값을 제공받기 위한 Java 자료형을 속성값으로 설정 -->
		<!-- ▶ Java 자료형 대신 typeAlias 엘리먼트로 제공된 별칭 사용 가능 -->
		<!-- keyProperty 속성: insert 엘리먼트의 parameterType 속성값으로 설정된 클래스의 필드명 -->
		<!-- order 속성: [BEFORE] 또는 [AFTER] 중 하나를 속성값으로 설정 -->
		<selectKey resultType="int" keyProperty="commentNo" order="BEFORE">
			select mycomment_seq.nextval from dual
		</selectKey>
		insert into mycomment values(#{commentNo}, #{commentId}, #{commentContent}, sysdate)
	</insert>

	<!-- resultType 속성을 사용하여 검색행이 Java 객체로 제공되도록 자동 매핑 처리 -->
	<!-- ▶ 검색행의 컬럼명과 resultType 속성값으로 설정된 클래스의 필드명이 같도록 작성 -->
	<!-- ※mapUnderscoreToCamelCase를 [true]로 설정했으므로 GOOD※ -->
	<select id="selectCommentList1" resultType="MyComment1">
		select comment_no, comment_id, comment_content, comment_date from mycomment order by comment_no desc
	</select>

	<!-- 검색행의 컬럼명과 resultType 속성값으로 설정된 클래스의 필드명이 모두 다른 경우 resultType 속성값으로 설정된 클래스의 객체 대신 NULL 제공 -->
	<!--
	<select id="selectCommentList2" resultType="MyComment2">
		select comment_no, comment_id, comment_content, comment_date from mycomment order by comment_no desc
	</select>
	-->
	
	<!-- 검색행의 컬럼명을 resultType 속성값으로 설정된 클래스의 필드명과 같도록 ColumnAlias 기능을 사용하여 검색 -->
	<!-- ▶ 식별자로 사용하기 부적절한 단어는 "" 기호를 사용하여 표현(EX: AliasName) -->
	<!--
	<select id="selectCommentList2" resultType="MyComment2">
		select comment_no "no", comment_id "id", comment_content "content", comment_date "date" from mycomment order by comment_no desc
	</select>
	-->
	
	<!-- resultMap 엘리먼트를 이용하여 검색행의 컬럼값을 객체 필드에 저장되도록 설정 -->
	<!-- ▶ type 속성값으로 설정된 클래스의 기본 생성자를 이용하여 객체를 생성하고 id 엘리먼트 또는 result 엘리먼트를 사용하여 객체의 Setter 메소드를 호출하여 검색행의 컬럼값으로 필드값 변경 -->
	<!-- ▶ resultMap 엘리먼트의 하위 엘리먼트로 id 엘리먼트 또는 result 엘리먼트는 0개 이상 설정 가능 -->
	<resultMap type="MyComment2" id="myComment2ResultMap">
		<id column="comment_no" property = "no"/>
		<result column="comment_id" property = "id"/>
		<result column="comment_content" property = "content"/>
		<result column="comment_date" property = "date"/>
	</resultMap>

	<!-- select 엘리먼트의 resultMap 속성을 사용하여 검색행을 Java 객체로 수동 매핑하여 제공 -->
	<!--
	<select id="selectCommentList2" resultMap="myComment2ResultMap">
		select comment_no, comment_id, comment_content, comment_date from mycomment order by comment_no desc
	</select>
	-->
	
	<!-- constructor 엘리먼트를 사용하여 type 속성값으로 설정된 클래스의 매개 변수가 작성된 생성자로 객체를 생성하고 생성자 매개 변수에 검색행의 컬럼값을 전달하여 객체 필드에 저장 -->
	<!-- ▶ resultMap 엘리먼트의 하위 엘리먼트로 constructor 엘리먼트는 0개 또는 1개만 작성 가능 -->
	<resultMap type="MyComment2" id="myComment2ConstructorResultMap">
		<!-- constructor: resultMap 엘리먼트의 type 속성값으로 설정된 Java 클래스의 생성자를 이용하여 매핑 처리하기 위한 정보를 제공하는 엘리먼트 -->
		<!-- ▶ 하위 엘리먼트: idArg / arg 엘리먼트 -->
		<!-- ▶ 생성자의 매개 변수의 갯수와 constructor 엘리먼트의 하위 엘리먼트의 갯수와 자료형이 반드시 동일해야 함! -->
		<constructor>
			<!-- idArg: 검색행의 컬럼값을 생성자 매개 변수에 전달하기 위한 엘리먼트 -->			
			<!-- ▶ PK 제약 조건이 설정된 컬럼값을 제공받아 생성자 매개 변수에 저장 -->
			<!-- column 속성: 검색행의 컬럼명을 속성값으로 설정 -->
			<!-- javaType 속성: 검색행의 컬럼값을 저장할 매개 변수의 Java 자료형을 속성값으로 설정 -->
			<!-- ▶ Java 자료형 대신 typeAlias로 설정된 별칭 사용 가능 -->
			<idArg column="comment_no" javaType="_int" />
			<!-- _int 를 해야 int 원시형! / int는 Integer 클래스의 별칭! -->
			<!-- Arg: 검색행의 컬럼값을 생성자 매개 변수에 전달하기 위한 엘리먼트 -->			
			<arg column="comment_id" javaType="string"/>
			
			<!--
			<arg column="comment_content" javaType="string"/>
			<arg column="comment_date" javaType="string"/>
			-->
		</constructor>
		<!-- constructor 엘리먼트와 id 엘리먼트(result 엘리먼트)를 같이 사용하여 매핑 정보 제공 가능 -->
		<result column="comment_content" property = "content"/>
		<result column="comment_date" property = "date"/>
	</resultMap>
	
	<!-- resultMap 변경 -->
	<select id="selectCommentList2" resultMap="myComment2ConstructorResultMap">
		select comment_no, comment_id, comment_content, comment_date from mycomment order by comment_no desc
	</select>
	
	<!--  
	<select id="selectCommentList3" resultType="MyComment3">
		select comment_no "no", comment_id "id", user_name "name", comment_content "content", comment_date "date" from mycomment join myuser on comment_id=user_id order by comment_no desc
	</select>
	-->
	
	<resultMap type="MyComment3" id="myComment3ResultMap">
		<id column="comment_no" property="no"/>
		<result column="comment_id" property="id"/>
		<result column="comment_content" property="content"/>
		<result column="comment_date" property="date"/>
		
		<result column="user_name" property="name"/>
	</resultMap>
	
	<select id="selectCommentList3" resultMap="myComment3ResultMap">
		select comment_no, comment_id, user_name, comment_content, comment_date from mycomment join myuser on comment_id=user_id order by comment_no desc
	</select>
	
	<select id="selectCommentUserList1" resultType="MyCommentUser1">
		select comment_no, comment_id, comment_content, comment_date, user_id, user_name from mycomment join myuser on comment_id=user_id order by comment_no desc
	</select>
	
	<resultMap type="MyCommentUser2" id="myCommentUser2ResultMap">
		<!-- association: 1:1 관계의 TABLE JOIN에서 1개의 검색행을 type 속성값으로 설정된 클래스의 Java 객체로 생성하여 필드에 저장되도록 매핑 처리하는 엘리먼트 -->		
		<!-- ▶ id 엘리먼트 또는 result 엘리먼트를 하위 엘리먼트로 사용하여 association 엘리먼트에 생성될 객체의 필드의 검색행의 컬럼값이 저장되도록 매핑 설정 -->
		<!-- property 속성: association 엘리먼트로 셍성된 객체가 저장될 클래스의 필드명을 속성값으로 설정 -->
		<!-- javaType 속성: 검색행을 이용하여 생성될 객체의 Java 자료형을 속성값으로 설정 -->
		<!-- ▶ Java 자료형 대신 typeAlias로 설정된 별칭 사용 가능 -->
		<association property="comment" javaType="Mycomment1">
			<id column="comment_no" property="commentNo"/>
			<result column="comment_id" property="commentId"/>
			<result column="comment_content" property="commentContent"/>
			<result column="comment_date" property="commentDate"/>
		</association>
		<association property="user" javaType="MyUser">
			<id column="user_id" property="userId"/>
			<result column="user_name" property="userName"/>
		</association>
	</resultMap>
	
	<select id="selectCommentUserList2" resultMap="myCommentUser2ResultMap">
		select comment_no, comment_id, comment_content, comment_date, user_id, user_name from mycomment join myuser on comment_id=user_id order by comment_no desc
	</select>
	
	<!-- 게시글 번호를 전달받아 MYCOMMENT 테이블에 저장된 게시글 정보를 검색하여 MyComment1 객체로 제공하는 엘리먼트 작성 -->
	<!-- ▶ 검색행 1개 -->
	<select id="selectComment" parameterType="int" resultType="MyComment1">
		select comment_no, comment_id, comment_content, comment_date from mycomment where comment_no=#{commentNo}
	</select>
	
	<!-- 게시글 번호를 전달받아 MYREPLY 테이블에 저장된 댓글 정보를 검색하여 MyReply 객체로 제공하는 엘리먼트 -->
	<!-- ▶ 검색행 0개 이상 -->
	<select id="selectCommentNoReplyList" parameterType="int" resultType="MyReply">
		select reply_no, reply_id, reply_content, reply_date, reply_comment_no from myreply where reply_comment_no=#{replyCommentNo} order by reply_no desc
	</select>
	
	<!-- resultMap 엘리먼트의 하위 엘리먼트 작성 순서 -->
	<!-- ▶ constructor ▷ id ▷ result ▷ association ▷ collection ▷ discriminator -->
	<!-- 문제점: resultMap 엘리먼트의 첫번째 하위 엘리먼트로 association 엘리먼트를 사용할 경우 내부적으로 selectOne() 메소드를 사용하여 하나의 검색행을 Java 객체로 생성하여 제공 -->
	<!-- ▶ SELECT 명령으로 다수의 행이 검색된 경우 TooManyResultsException 발생 -->
	<!-- 해결법: 다수의 행이 검색되는 경우 resultMap 엘리먼트의 첫번째 자식 엘리먼트로 association 엘리먼트가 아닌 다른 엘리먼트 사용 -->
	<resultMap type="MyCommentReply" id="myCommentReplyResultMap">
		<id column="comment_no"/>
		<!-- 검색행 1개 = 객체 1개 를 만들어줄 때 association 엘리먼트! = MycommentReply 객체로부터 MyComment1 객체 생성 -->
		<association property="comment" javaType="Mycomment1">
			<id column="comment_no" property="commentNo"/>
			<result column="comment_id" property="commentId"/>
			<result column="comment_content" property="commentContent"/>
			<result column="comment_date" property="commentDate"/>
		</association>
		<!-- collection: 1:N 관계의 테이블 조인에서 0개 이상의 검색행을 List 객체로 생성하여 resultMap 엘리먼트에 type 속성값으로 설정된 클래스의 객체 필드에 저장되도록 매핑 처리하는 엘리먼트 -->
		<!-- ▶ id 엘리먼트 또는 result 엘리먼트를 하위 엘리먼트로 사용하여 collection 엘리먼트에 생성될 List 객체의 요소(객체) 필드의 검색행의 컬럼값이 저장되도록 매핑 설정 -->
		<!-- property 속성: collection 엘리먼트로 셍성된 List 객체가 저장될 클래스의 필드명을 속성값으로 설정 -->
		<!-- ofType 속성: List 객체의 요소로 저장될 객체의 Java 자료형을 속성값으로 설정 -->
		<!-- ▶ Java 자료형 대신 typeAlias로 설정된 별칭 사용 가능 -->
		<collection property="replyList" ofType="MyReply">
			<id column="reply_no" property="replyNo"/>
			<result column="reply_id" property="replyId"/>
			<result column="reply_content" property="replyContent"/>
			<result column="reply_date" property="replyDate"/>
			<result column="reply_comment_no" property="replyCommentNo"/>
		</collection>
	</resultMap>
	
	<!-- 게시글 번호를 전달받아 MYCOMMENT 테이블에 저장된 게시글 정보와 MYREPLY 테이블에 저장된 댓글 정보를 검색하여 MyCommentReply 객체로 제공하는 엘리먼트 -->
	<!-- 게시글 정보: 1개 / 댓글 정보: 0개 이상 -->
	<select id="selectCommentReply" parameterType="int" resultMap="myCommentReplyResultMap">
		select comment_no, comment_id, comment_content, comment_date, reply_no, reply_id, reply_content, reply_date, reply_comment_no
		from mycomment left join myreply on comment_no=reply_comment_no where comment_no=#{commentNo} order by reply_no desc
		<!-- 1번 게시글: 댓글이 3개 ▷ 3번 검색됨(3개 행) / 2번 게시글: 댓글이 0개 ▷ 0번 검색됨(0개 행) = 오류 = INNERJOIN을 사용하였기 때문 = 따라서 LEFT OUTER JOIN 사용 -->
		<!-- ▶ 1:N 관계의 테이블 조인에서는 OUTER JOIN을 사용하여 검색 -->
		<!-- 댓글이 없는 게시글을 무조건 검색하기 위하여 LEFT OUTER JOIN 사용 -->
	</select>
	
	<!--
	
	<resultMap type="MyCommentReplyUser" id="myCommentReplyUserResultMap">
		<id column="comment_no" property="commentNo"/>
		<result column="comment_id" property="commentId"/>
		<result column="comment_content" property="commentContent"/>
		<result column="comment_date" property="commentDate"/>
		
		<association property="user" javaType="MyUser">
			<id column="user_id" property="userId"/>
			<result column="user_name" property="userName"/>
		</association>
		
		<collection property="replyUserList" ofType="MyReplyUser">
			<association property="reply" javaType="MyReply">
				<id column="reply_no" property="replyNo"/>
				<result column="reply_id" property="replyId"/>
				<result column="reply_content" property="replyContent"/>
				<result column="reply_date" property="replyDate"/>
				<result column="reply_comment_no" property="replyCommentNo"/>
			</association>
			<association property="user" javaType="MyUser">
				<result column="reply_user_no" property="userNo"/>
				<result column="reply_user_name" property="userName"/>	
			</association>
		</collection>
	</resultMap>
	
	-->
	
	<!-- 게시글 번호를 전달받아 MYCOMMENT 테이블에 저장된 게시글 정보(1개)와 MYREPLY 테이블에 저장된 댓글 정보(0개 이상)를 검색하여 MyCommentReplyUser 객체로 제공하는 엘리먼트 -->
	<!-- 게시글에 대한 회원 정보와 댓글에 대한 회원 정보를 구분하기 위하여 reply_user_id, reply_user_name 컬럼 추가 -->
	<!--
	
	<select id="selectCommentReplyUser" parameterType="int" resultMap="myCommentReplyUserResultMap">
		select comment_no, comment_id, comment_content, comment_date, user_id, user_name, reply_no, reply_id, reply_content, reply_date, reply_comment_no
		, reply_user_id, reply_user_name from mycomment join myuser on comment_id=user_id left join 
		(select reply_no, reply_id, reply_content, reply_date, reply_comment_no, user_id reply_user_id, user_name reply_user_name from myreply join myuser on reply_id=user_id)
		on comment_no=reply_comment_no where comment_no=#{commentNo} order by reply_no desc
	</select>
	
	-->
	
	<!-- autoMapping 속성 : false 또는 true 중 하나를 속성값으로 설정 -->
	<!-- => autoMapping 속성값을 [true]로 설정한 경우 검색행의 컬럼과 필드명이 같은 경우 자동 매핑 처리 -->
	<resultMap type="MyCommentReplyUser" id="myCommentReplyUserResultMap" autoMapping="true">
		<id column="comment_no" property="commentNo"/>
		<association property="user" javaType="MyUser" autoMapping="true"/>
		<collection property="replyUserList" select="selectReplyUser" column="comment_no" />
	</resultMap>
	
	<resultMap type="MyReplyUser" id="myReplyUserResultMap">
		<association property="reply" javaType="MyReply" autoMapping="true"/>
		<association property="user" javaType="MyUser" autoMapping="true"/>
	</resultMap>

	<select id="selectReplyUser" parameterType="int" resultMap="myReplyUserResultMap">
		select reply_no, reply_id, reply_content, reply_date, reply_comment_no, user_id, user_name from
		myreply join myuser on reply_id=user_id where reply_comment_no=#{replyCommentNo} order by reply_no desc
	</select>
	
	<select id="selectCommentReplyUser" parameterType="int" resultMap="myCommentReplyUserResultMap">
		select comment_no, comment_id, comment_content, comment_date, user_id, user_name from
		mycomment join myuser on comment_id=user_id where comment_no=#{commentNo}
	</select> 
</mapper>