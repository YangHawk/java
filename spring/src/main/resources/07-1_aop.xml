<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

	<!-- 핵심 관심 모듈의 클래스를 Spring Bean으로 등록 -->
	<bean class="xyz.itwill07.aop.HewonDAOImpl" id="hewonDAO" />
	<!-- 위에 애들 밑에 Injection하는 거야! -->
	<bean class="xyz.itwill07.aop.HewonServiceImpl" id="hewonService">
		<property name="hewonDAO" ref="hewonDAO" />
	</bean>

	<!-- 횡단 관심 모듈의 클래스(Advice Class)를 Spring Bean으로 등록 -->
	<bean class="xyz.itwill07.aop.HewonAdvice" id="hewonAdvice" />

	<!-- Spring AOP(Aspect Oriented Programming - 관점 지향 프로그래밍): AspectJ 컴파일러에 의하여 프로그램 실행 시 핵심 관심 코드와 횡단 관심 코드가 결합되어(Weaving) 실행되기 위한 기능 제공 -->
	<!-- Spring AOP 기능을 사용하기 위해선 반드시 aspectjrt 라이브러리와 aspectjweaver 라이브러리가 프로젝트에 빌드 처리 되어있어야 함 - 메이븐 이용: pom/xml -->
	<!-- Spring Bean Configuration File에서 Spring AOP 기능을 구현하기 위해 AOP Namespaces를 추가하여 spring-aop.xsd 파일의 엘리먼트를 제공받아 사용할 수 있도록 설정 -->

	<!-- config: Spring AOP 관련 설정을 제공하기 위한 엘리먼트 -->
	<aop:config>
		<!-- aspect: 핵심 관심 코드에 횡단 관심 코드를 원하는 위치에 삽입하여 실행되도록 설정하기 위한 엘리먼트 -->
		<!-- ▶ 횡단 관심 코드가 삽입될 위치(JoinPotin)를 하위 엘리먼트로 설정 -->
		<!-- ▶ 하위 엘리먼트: before / after / after-returning / after-throwing / around -->
		<!-- ref 속성: 횡단 관심 모듈로 작성된 클래스의 Spring Bean의 식별자(beanName)를 속성값으로 설정 -->
		<!-- ▶ 횡단 관심 코드의 메소드를 호출하기 위하여 객체를 제공받기 위한 속성 -->
		<aop:aspect ref="hewonAdvice">
			<!-- before: 타겟 메소드의 명령(핵심 관심 코드) 실행 전 횡단 관심 코드로 삽입되어 실행되도록 설정하는 엘리먼트 -->
			<!-- method 속성: 횡단 관심 코드의 메소드 이름을 속성값으로 설정 - 이클립스 자동 완성 기능 제공 -->
			<!-- pointcut 속성: 핵심 관심 모듈로 작성된 클래스의 Spring Bean의 메소드 중 횡단 관심 코드가 삽입될 메소드를 지정하기 위한 PointCut 표현식을 속성값으로 설정 - 타겟 메소드 설정 -->
			<!-- ▶ execution / within / bean 명시자 중 하나를 사용하여 타겟 메소드 지정 후 명시자에는 검색 패턴 문자와 연산자 사용 가능 -->
			<!-- ▶ 명시자에 사용 가능한 검색 패턴 문자: ..(0개 이상) / *(1개 이상) / ?(0개 또는 1개) -->
			<!-- ▶ PointCut 표현식에서 사용 가능한 연산자: !(Not) / &&(And) / ||(Or) - 명시자를 결합 시킬 때 사용 -->

			<!-- execution 명시자를 이용하여 타겟 메소드를 지정하는 방법 -->
			<!-- ▶ execution 명시자는 메소드의 머릿부를 표현하여 타겟 메소드 지정 -->
			<!-- 형식: execution([접근 제한자] 반환형 [패키지.클래스.]메소드명(자료형, 자료형, ...) -->
			<!-- ▶ 클래스 대신 인터페이스 사용 가능 - 인터페이스를 상속받은 모든 자식 클래스를 표현할 수 있음 -->
			<!-- ▶ 타겟 메소드로 지정되는 클래스는 반드시 Spring Bean으로 등록된 클래스만 설정 가능 -->
			<!-- ▶ 반환형 또는 매개 변수의 자료형이 클래스(인터페이스)인 경우 패키지를 포함하여 표현 -->
			<!-- <aop:before method="beforeLog" pointcut="execution(void addHewon(xyz.itwill07.aop.Hewon))" /> -->
			<!-- 메소드의 매개 변수가 0개 이상인 메소드를 타겟 메소드로 지정 -->
			<!-- <aop:before method="beforeLog" pointcut="execution(* *(..))" /> -->
			<!-- 메소드의 매개 변수가 1개 이상인 메소드를 타겟 메소드로 지정 - 매개 변수가 반드시 존재해야 함 -->
			<!-- <aop:before method="beforeLog" pointcut="execution(* *(*))" /> -->
			<!-- xyz.iwill07.aop 패키지의 모든 클래스의 모든 메소드를 타겟 메소드로 지정 -->
			<!-- <aop:before method="beforeLog" pointcut="execution(* xyz.itwill07.aop.*.*(..))" /> -->
			<!-- xyz.iwill07.aop 패키지와 하위 패키지의 모든 클래스의 모든 메소드를 타겟 메소드로 지정 -->
			<!-- <aop:before method="beforeLog" pointcut="execution(* xyz.itwill07.aop..*(..))" /> -->
			<!-- <aop:before method="beforeLog" pointcut="execution(* xyz.itwill07.aop.HewonDAO.*(..))" /> -->
			<!-- <aop:before method="beforeLog" pointcut="execution(* xyz.itwill07.aop.Hewon*.*(..))" /> -->
			<!-- <aop:before method="beforeLog" pointcut="execution(* get*(..))" /> -->
			<!-- <aop:before method="beforeLog" pointcut="!execution(* get*(..))" /> -->
			<!-- <aop:before method="beforeLog" pointcut="execution(* *(int)) or execution(int *(..))" /> -->

			<!-- within 명시자를 사용하여 타겟 메소드를 지정하는 방법 -->
			<!-- ▶ Spring Bean으로 등록된 클래스의 모든 메소드를 타겟 메소드로 지정 -->
			<!-- 형식: within(패키지명.클래스명) -->
			<!-- ▶ 클래스 대신 인터페이스 사용 불가능 -->
			<!-- <aop:before method="beforeLog" pointcut="within(xyz.itwill07.aop.HewonDAOImpl)" /> -->
			<!-- <aop:before method="beforeLog" pointcut="within(xyz.itwill07.aop.HewonServiceImpl)" /> -->
			<!-- <aop:before method="beforeLog" pointcut="within(xyz.itwill07.aop.*)" /> -->

			<!-- bean 명시자를 사용하여 타겟 메소드를 지정하는 방법 -->
			<!-- ▶ Spring Bean의 beanName으로 등록된 클래스의 모든 메소드를 타겟 메소드로 지정 -->
			<!-- 형식: bean(beanName) -->
			<!-- <aop:before method="beforeLog" pointcut="bean(hewonDAO)" /> -->
			<!-- <aop:before method="beforeLog" pointcut="bean(hewonService*)" /> -->
			<!-- <aop:before method="beforeLog" pointcut="bean(hewon*)" /> -->

			<!-- pointcut: Spring Bean으로 등록된 클래스(핵심 관심 모듈)의 메소드 중 횡단 관심 코드가 삽입될 타겟 메소드를 지정하기 위한 엘리먼트 -->
			<!-- ▶ 많이 사용되는 PointCut 표현식을 저장하여 타겟 메소드로 제공하기 위하여 사용 -->
			<!-- aspect 엘리먼트 선언 전 작성(모든 aspect에서 사용 가능 - 전역)하거나 aspect 엘리먼트의 하위 엘리먼트로 작성(해당 aspect에서 사용 가능 - 지역) 가능 -->
			<!-- expression 속성: 타겟 메소드를 지정하기 위한 PointCut 표현값을 속성값으로 설정 -->
			<!-- id 속성: pointcut 엘리먼트를 구분할 수 있는 식별자를 속성값으로 설정 -->
			<aop:pointcut expression="execution(* xyz.itwill07.aop.HewonDAO.*(..))" id="hewonDAOPointCut" />
			<aop:pointcut expression="execution(* xyz.itwill07.aop.HewonService.*(..))" id="hewonServicePointCut" />

			<!-- pointcut-ref 속성: pointcut 엘리먼트의 식별자를 속성값으로 설정 -->
			<!-- <aop:before method="beforeLog" pointcut-ref="hewonDAOPointCut"/> -->
			<aop:before method="beforeLog" pointcut-ref="hewonServicePointCut" />

			<!-- after: 타겟 메소드의 명령(핵심 관심 코드) 실행 후 횡단 관심 코드를 무조건 삽입하여 실행되도록 설정하는 엘리먼트 -->
			<aop:after method="afterLog" pointcut-ref="hewonServicePointCut" />

			<!-- after-returning: 타겟 메소드의 명령(핵심 관심 코드)이 정상적으로 실행된 후 횡단 관심 코드를 삽입하여 실행되도록 설정하는 엘리먼트 -->
			<aop:after-returning method="afterReturningLog" pointcut-ref="hewonServicePointCut" />

			<!-- after-throwing: 타겟메소드의 명령(핵심 관심 코드)이 실행될 때 예외가 발생된 경우 횡단 관심 코드를 삽입하여 실행되도록 설정하는 엘리먼트 -->
			<aop:after-throwing method="afterThrowingLog" pointcut-ref="hewonServicePointCut" />

			<!-- around: 타겟 메소드의 명령(핵심 관심 코드) 실행 전과 후에 횡단 관심 코드를 삽입하여 실행되도록 설정하는 엘리먼트 -->
			<aop:around method="aroundLog" pointcut-ref="hewonServicePointCut" />
		</aop:aspect>
	</aop:config>
</beans>
