<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- 스프링 컨테이너는 클래스의 기본 생성자를 사용하여 객체를 생성 -->
	<!-- ▶ 객체 필드에는 기본값(숫자형: 0 / 논리형: false / 참조형: null) 저장 -->
	<bean class="xyz.itwill05.di.Student" id="student1" />

	<!-- Spring Injection: 스프링 컨테이너에 의하여 Spring Bean Configuration File에 등록된 클래스를 객체로 생성할 때 객체 필드에 필요한 값(객체)이 저장되도록 설정 -->
	<!-- ▶ 생성자(Constructor Injection) 또는 Setter 메소드(Setter Injection)를 사용하여 객체 필드에 값(객체) 저장 -->

	<!-- 스프링 컨테이너가 클래스의 매개 변수가 선언된 생성자를 사용하여 객체를 생성 -->
	<!-- ▶ 생성자 매개 변수의 전달된 값(객체)을 이용하여 필드으로 저장할 수 있도록 - Constructor Injection -->
	<!-- Constructor Injection: 생성자를 사용하여 객체 필드에 원하는 값(객체)를 저장하는 방법 -->
	<!-- ▶ bean 엘리먼트의 하위 엘리먼트로 constructor-arg 엘리먼트를 사용하여 설정 -->
	<bean class="xyz.itwill05.di.Student" id="student2">
		<!-- constructor-arg: 생성자 매개 변수에 값(객체)을 전달하는 엘리먼트 -->
		<!-- ▶ constructor-arg 엘리먼트의 갯수만큼 매개 변수가 선언된 생성자가 반드시 작성되어있어야 함 -->
		<!-- value 속성: 생성자 매개 변수에 전달되어 저장될 값을 속성값으로 설정 -->
		<!-- ▶ 필드에 값이 저장되도록 설정하는 속성 - 값 주입(Value Injection) -->
		<!-- ▶ 매개 변수에 전달되는 값은 기본적으로 문자열로 전달되지만 매개 변수에 자료형에 의하여 자동 형변환 -->
		<!-- ▶ 매개 변수의 자료형에 의하여 자동 형변환 시 NumberFormatException 발생 가능 - int 에 'abc' 전달! -->
		<!-- type 속성: 매개 변수의 자료형을 속성값으로 설정 -->
		<!-- <constructor-arg value="1000" type="int" /> -->
		<constructor-arg value="1000" type="String" />
	</bean>

	<!-- constructor-arg 엘리먼트의 작성 순서에 의하여 매개 변수에 값(객체)이 차례대로 전달되어 저장 -->
	<!-- 
	<bean class="xyz.itiwll05.di.Student" id="student3">
		<constructor-arg value="1000" />
		<constructor-arg value="홍길동" /> 
		<constructor-arg value="abc@naver.com" />
	</bean>
	-->


	<bean class="xyz.itwill05.di.Student" id="student3">
		<!-- index 속성: 생성자 매개 변수에 값(객체)를 전달하기 위한 순서를 속성값으로 설정 -->
		<!-- ▶ index 속성값을 0부터 1씩 증가되는 정수값을 사용 -->
		<constructor-arg value="2000" index="0" />
		<constructor-arg value="abc@naver.com" index="2" />
		<constructor-arg value="홍길동" index="1" />
	</bean>

	<!-- 스프링 컨테이너는 클래스의 기본 생성자를 사용하여 객체를 생성 - 객체 필드의 기본값이 저장 -->
	<!-- ▶ 객체 생성 후 필드에 Setter 메소드를 호출하여 필드값으로 저장(변경) - Setter Injection -->
	<!-- Setter Injection: Setter() 메소드를 사용하여 객체 필드에 값(객체)를 저장(변경)하는 방법 -->
	<!-- ▶ bean 엘리먼트의 하위 엘리먼트로 property 엘리먼트를 사용하여 설정 -->
	<bean class="xyz.itwill05.di.Student" id="student4">
		<!-- property: 객체 필드의 Setter 메소드를 호출하여 필드값을 변경하는 엘리먼트 -->
		<!-- name 속성: 필드값을 변경하기 위한 필드명을 속성값으로 설정 - 자동 완성 기능 사용 -->
		<!-- ▶ name 속성값으로 설정된 필드에 대한 Setter 메소드를 자동 호출하여 필드값 변경 -->
		<!-- ▶ 필드에 대한 Setter 메소드가 없거나 형식에 맞지 않게 선언된 경우 예외 발생 -->
		<!-- value 속성: 생성자 매개 변수에 전달되어 저장될 값을 속성값으로 설정 -->
		<property name="num" value="3000" />
		<property name="name" value="임꺽정" />
		<property name="email" value="xyz@naver.com" />
	</bean>

	<!-- Constructor Injection과 Setter Injectino을 같이 사용하여 객체 초기화 작업 가능 -->
	<bean class="xyz.itwill05.di.Student" id="student5">
		<constructor-arg value="4000" />
		<constructor-arg value="전우치" />
		<property name="email" value="opq@naver.com" />
	</bean>

	<!-- PropertyPlaceholderConfigurer 클래스를 Spring Bean으로 등록 -->
	<!-- PropertyPlaceholderConfigurer 클래스: Properties 파일을 제공받아 파일에 저장된 값을 Spring Bean Configuration File에서 사용할 수 있도록 제공하는 클래스 -->
	<!-- ▶ locations 필드에 Properties 파일 경로를 전달하여 저장 -->
	<!-- ▶ Properties 파일에 의하여 제공되는 값을 Spring Bean Configuration File에서는 ${이름} 형식으로 사용 가능 -->
	<!--
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations" value="xyz/itwill05/di/student.properties" /> 
	</bean>
	-->

	<bean class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer">
		<property name="locations" value="xyz/itwill05/di/student.properties" />
	</bean>

	<bean class="xyz.itwill05.di.Student" id="student6">
		<property name="num" value="${num}"/>
		<property name="name" value="${name}"/>
		<property name="email" value="${email}"/>
	</bean>

	<!-- StudentDAO 인터페이스를 상속받은 자식 클래스(DAO 클래스)를 Spring Bean으로 등록 -->
	<bean class="xyz.itwill05.di.StudentJdbcDAO" id="studentJdbcDAO" />
	<bean class="xyz.itwill05.di.StudentMybatisDAO" id="studentMybatisDAO" />

	<!-- StudentService 인터페이스를 상속받은 자식 클래스(Service 클래스)를 Spring Bean으로 등록 -->
	<!-- ▶ 클래스의 기본 생성자를 이용하여 객체 생성 - 객체 필드에는 기본값 저장 -->
	<!-- 문제점: StudentServiceImpl 클래스로 생성된 객체의 studentDAO 필드에는 [null]이 저장되어 있어 SrudentServiceImpl 클래스의 메소드에서 필드로 메소드를 호출할 경우 NullPointerException 발생 -->
	<!-- ▶ 포함(의존) 관계가 구현되지 않음! -->
	<!-- 해결법: StudentServiceImpl 클래스로 생성된 객체의 studentDAO 필드에 StudentDAO 인터페이스를 상속받은 자식 클래스의 객체가 저장되도록 설정 -->
	<!-- ▶ 포함(의존) 관계 구현! -->
	<!-- <bean class="xyz.itwill05.di.StudentServiceImpl" id="studentServiceImpl" /> -->

	<!-- StudentServiceImpl 클래스의 매개 변수가 선언된 생성자를 이용하여 객체 생성 -->
	<!-- ▶ 생성자 매개 변수에 StudentDAO 인터페이스를 상속받은 자식 클래스(DAO 클래스)의 객체를 전달하여 studentDAO 필드에 저장 - Constructor Injection -->
	<!-- constructor-arg 엘리먼트를 사용하여 StudentServiceImpl가 객체로 생성될 때 생성자 매개 변수에 StudentDAO 인터페이스를 상속받은 자식 클래스의 객체를 전달하여 필드에 저장 - 의존 관계 구현! -->
	<!-- ref 속성: 스프링 컨테이너로 관리되는 Spring Bean의 식별자(beanName)을 속성값으로 저장 - 자동 완성 기능 사용 가능 -->	
	<!-- ▶ 스프링 컨테이너에게 Spring Bean을 제공받아 객체 필드에 저장 - 의존성 주입(DI: Dependency Injection) -->
	<!--
	<bean class="xyz.itwill05.di.StudentServiceImpl" id="studentServiceImpl">
		<constructor-arg ref="studentJdbcDAO" />
	</bean>
	-->
	
	<!-- 클래스의 기본 생성자를 이용하여 객체 생성 - 객체 필드에는 기본값 저장 -->
	<!-- ▶ Setter 메소드를 호출하여 StudentDAO 인터페이스를 상속받은 자식 클래스(DAO 클래스)의 객체를 필드에 저장 - Setter Injection -->
	<!-- property 엘리먼트를 사용하여 StudentServiceImpl 객체의 필드에 대한 Setter 메소드를 호출하여 StudentDAO 인터페이스를 상속받은 자식 클래스(DAO 클래스)의 객체를 필드에 저장 - 의존 관계 구현! -->
	<!-- ref 속성: 스프링 컨테이너로 관리되는 Spring Bean의 식별자(beanName)을 속성값으로 저장 - 자동 완성 기능 사용 가능 -->	
	<!-- ▶ 스프링 컨테이너에게 Spring Bean을 제공받아 객체 필드에 저장 - 의존성 주입(DI: Dependency Injection) -->
	<bean class="xyz.itwill05.di.StudentServiceImpl" id="studentServiceImpl">
		<!-- Service 클래스에서 사용하던 DAO 클래스의 객체가 변경되어도 클래스를 변경하지 않고 Spring Bean Configuration File의 환경 설정만 변경하여도 의존 관계가 바뀜! -->
		<!-- ▶ 관계의 대한 재설정 - 유지 보수의 효율성 ↑ -->
		<!-- <property name="studentDAO" ref="studentJdbcDAO" /> -->
		<property name="studentDAO" ref="studentMybatisDAO" />
	</bean>
</beans>
